// En el taller de Santa üéÖ, algunos mensajes navide√±os han sido escritos de manera peculiar: las letras dentro de los par√©ntesis deben ser le√≠das al rev√©s

// Santa necesita que estos mensajes est√©n correctamente formateados.Tu tarea es escribir una funci√≥n que tome una cadena de texto y revierta los caracteres dentro de cada par de par√©ntesis, eliminando los par√©ntesis en el mensaje final.

// Eso s√≠, ten en cuenta que pueden existir par√©ntesis anidados, por lo que debes invertir los caracteres en el orden correcto.

const a = decode('hola (odnum)')
console.log(a) // hola mundo

// const b = decode('(olleh) (dlrow)!')
// console.log(b) // hello world!

// const c = decode('sa(u(cla)atn)s')
// console.log(c) // santaclaus


// Paso a paso:
// 1. Invertimos el anidado -> sa(ualcatn)s
// 2. Invertimos el que queda -> santaclaus
// Notas:

// Las cadenas de entrada siempre estar√°n bien formadas con par√©ntesis que coinciden correctamente, no necesitas validarlos.
// En el mensaje final no deben quedar par√©ntesis.
// El nivel m√°ximo de anidamiento es 2.

function decode(message) {
  // Detectar (
  // Detectar ( otra vez de forma recursiva y guardar el √≠ndice
  // Detectar ) y guardar el √≠ndice
  // Invertir el mensaje entre los dos √≠ndices
  // Quitar los par√©ntesis
  // Repetir hasta que no queden par√©ntesis
  const messageArray = message.split('')
  console.log("messageArray:", messageArray)
  const openIndex = messageArray.indexOf('(', 5)
  console.log("openIndex:", openIndex)
  // const presviousOpenIndex = messageArray.slice(openIndex + 1)
  // console.log("presviousOpenIndex:", presviousOpenIndex)
  if (openIndex === -1) {
    return message
  }
  // const innerOpenIndex = decode(presviousOpenIndex.join(''))
  // console.log("innerOpenIndex:", innerOpenIndex)


  // return presviousOpenIndex
}

// // Detectar si hay par√©ntesis
// const hasParenthesis = message.includes('(')
// if (hasParenthesis) {
//   // Detectar si hay par√©ntesis anidados
//   const hasNestedParenthesis = message.includes('((')
//   if (hasNestedParenthesis) {
//     // Invertir los par√©ntesis anidados
//     const nestedParenthesis = message.match(/\(\w+\)/g)
//     const nestedParenthesisReversed = nestedParenthesis.map(parenthesis => {
//       return parenthesis.split('').reverse().join('')
//     })
//     // Invertir los par√©ntesis que quedan
//     const messageWithoutNestedParenthesis = message.replace(/\(\w+\)/g, '')
//     const messageReversed = messageWithoutNestedParenthesis.split('').reverse().join('')
//     // Unir los par√©ntesis anidados invertidos con los par√©ntesis que quedan invertidos
//     const result = messageReversed.replace(/\(\)/g, '')
//     return result
//   } else {
//     // Invertir los par√©ntesis que quedan
//     const messageReversed = message.split('').reverse().join('')
//     // Unir los par√©ntesis anidados invertidos con los par√©ntesis que quedan invertidos
//     const result = messageReversed.replace(/\(\)/g, '')
//     return result
//   }
// }
// return ''